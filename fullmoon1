local fask = task
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false

local File = pcall(function()
    AllIDs = game:GetService("HttpService"):JSONDecode(readfile("NotSameServers.json"))
end)

if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
end

-- H√†m ki·ªÉm tra s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i trong game hi·ªán t·∫°i
local function GetPlayerCount()
    return #game.Players:GetChildren() < 4 -- Ki·ªÉm tra n·∫øu c√≥ h∆°n 4 ng∆∞·ªùi ch∆°i
end

function TPReturner()
    local Site
    Site = game:GetService("HttpService"):JSONDecode(
        game:HttpGet("http://localhost:3000/JobData/full-moon1")
    )

    local ID = ""
    local num = 0

    -- Ki·ªÉm tra n·∫øu API tr·∫£ v·ªÅ danh s√°ch "jobs"
    if Site.jobs then
        for i, v in pairs(Site.jobs) do
            local Possible = true
            ID = tostring(v.jobId) -- S·ª≠ d·ª•ng "jobId" thay v√¨ "id"

            -- Ki·ªÉm tra s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i trong server b√™n ngo√†i
            if tonumber(v.playerCount) < 4 then -- Gi·ªõi h·∫°n server c√≥ √≠t h∆°n 4 ng∆∞·ªùi ch∆°i
                -- Ki·ªÉm tra s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i trong game hi·ªán t·∫°i (n·∫øu c√≥ h∆°n 4 ng∆∞·ªùi ch∆°i, b·ªè qua)
                if GetPlayerCount() then
                    continue -- N·∫øu c√≥ h∆°n 4 ng∆∞·ªùi ch∆°i trong local server, b·ªè qua v√† ti·∫øp t·ª•c v·ªõi v√≤ng l·∫∑p
                end

                for _, Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            pcall(function()
                                delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end

                -- N·∫øu server h·ª£p l·ªá, th·ª±c hi·ªán d·ªãch chuy·ªÉn
                if Possible == true then
                    table.insert(AllIDs, ID)
                    fask.wait()
                    pcall(function()
                        writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
                        fask.wait()
                        local args = {
                            [1] = "teleport",
                            [2] = ID
                        }

                        game:GetService("ReplicatedStorage").__ServerBrowser:InvokeServer(unpack(args))
                    end)
                    fask.wait(0.5)
                end
            end
        end
    end
end

-- Function to check the moon phase
local function GetMoonPhase()
    local moonTextures = {
        ["http://www.roblox.com/asset/?id=9709149431"] = "Full Moon üåï",
        ["http://www.roblox.com/asset/?id=9709149052"] = "75%",
        ["http://www.roblox.com/asset/?id=9709143733"] = "50%",
        ["http://www.roblox.com/asset/?id=9709150401"] = "25%",
        ["http://www.roblox.com/asset/?id=9709149680"] = "15%"
    }

    local textureId = game:GetService("Lighting").Sky.MoonTextureId

    -- Check if the textureId exists in the table
    if moonTextures[textureId] then
        print("Current Moon Phase: " .. moonTextures[textureId])
        return moonTextures[textureId]
    else
        print("Unknown Moon Phase")
        return nil
    end
end

-- Function to perform the 'hop' action
local function Hop()
    print("Moon phase is not Full Moon üåï or 75%. Triggering hop action...")
    -- Add your hop logic here (e.g., teleport or other action)
end

-- Main Teleport Function
function Teleport()
    while fask.wait(10) do
        -- Check the current moon phase
        local currentMoonPhase = GetMoonPhase()

        -- If moon phase is neither "Full Moon üåï" nor "75%", trigger the hop action
        if currentMoonPhase and currentMoonPhase ~= "Full Moon üåï" and currentMoonPhase ~= "75%" then
            Hop()  -- Trigger the hop action
        end

        pcall(function()
            TPReturner()
        end)
    end
end

Teleport()
