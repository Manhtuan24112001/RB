local fask = task
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false

local File = pcall(function()
    AllIDs = game:GetService("HttpService"):JSONDecode(readfile("NotSameServers.json"))
end)

if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
end

function TPReturner()
    local Site
    Site = game:GetService("HttpService"):JSONDecode(
        game:HttpGet("http://localhost:3000/JobData/rare-boss")
    )

    local ID = ""
    local num = 0

    -- Kiểm tra nếu API trả về danh sách "jobs"
    if Site.jobs then
        -- Lấy job mới nhất (ở cuối danh sách)
        local latestJob = Site.jobs[#Site.jobs]  -- lấy phần tử cuối cùng
        if latestJob and latestJob.bossName == "rip_indra True Form" then
            local Possible = true
            ID = tostring(latestJob.jobId)

            -- Kiểm tra số lượng người chơi
            if tonumber(latestJob.playerCount) < 12 then
                for _, Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            pcall(function()
                                delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end

                -- Nếu server hợp lệ, thực hiện dịch chuyển
                if Possible == true then
                    table.insert(AllIDs, ID)
                    fask.wait()
                    pcall(function()
                        writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
                        fask.wait()
                        local args = {
                            [1] = "teleport",
                            [2] = ID
                        }

                        game:GetService("ReplicatedStorage").__ServerBrowser:InvokeServer(unpack(args))
                    end)
                    fask.wait(0.5)
                end
            end
        end
    end
end

local function IsBossExists(bossName)
    -- Kiểm tra xem boss đã tồn tại trong workspace hoặc ReplicatedStorage chưa
    if game.Workspace.Enemies:FindFirstChild(bossName) or game.ReplicatedStorage:FindFirstChild(bossName) then
        return true
    end
    return false
end

function Teleport()
    while fask.wait(1) do
        -- Kiểm tra xem boss đã xuất hiện chưa
        if not IsBossExists("rip_indra True Form") then
            -- Nếu boss chưa xuất hiện, thực hiện teleport
            pcall(function()
                TPReturner()
            end)
        else
            print("Boss đã xuất hiện! Không cần teleport.")
        end
    end
end

Teleport()  -- Bắt đầu quá trình teleport
local fask = task
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false

local File = pcall(function()
    AllIDs = game:GetService("HttpService"):JSONDecode(readfile("NotSameServers.json"))
end)

if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
end

function TPReturner()
    local Site
    Site = game:GetService("HttpService"):JSONDecode(
        game:HttpGet("http://localhost:3000/JobData/rare-boss")
    )

    local ID = ""
    local num = 0

    -- Kiểm tra nếu API trả về danh sách "jobs"
    if Site.jobs then
        -- Lấy job mới nhất (ở cuối danh sách)
        local latestJob = Site.jobs[#Site.jobs]  -- lấy phần tử cuối cùng
        if latestJob and latestJob.bossName == "Dough King" then
            local Possible = true
            ID = tostring(latestJob.jobId)

            -- Kiểm tra số lượng người chơi
            if tonumber(latestJob.playerCount) < 12 then
                for _, Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            pcall(function()
                                delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end

                -- Nếu server hợp lệ, thực hiện dịch chuyển
                if Possible == true then
                    table.insert(AllIDs, ID)
                    fask.wait()
                    pcall(function()
                        writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
                        fask.wait()
                        local args = {
                            [1] = "teleport",
                            [2] = ID
                        }

                        game:GetService("ReplicatedStorage").__ServerBrowser:InvokeServer(unpack(args))
                    end)
                    fask.wait(0.5)
                end
            end
        end
    end
end

local function IsBossExists(bossName)
    -- Kiểm tra xem boss đã tồn tại trong workspace hoặc ReplicatedStorage chưa
    if game.Workspace.Enemies:FindFirstChild(bossName) or game.ReplicatedStorage:FindFirstChild(bossName) then
        return true
    end
    return false
end

function Teleport()
    while fask.wait(1) do
        -- Kiểm tra xem boss đã xuất hiện chưa
        if not IsBossExists("Dough King") then
            -- Nếu boss chưa xuất hiện, thực hiện teleport
            pcall(function()
                TPReturner()
            end)
        else
            print("Boss đã xuất hiện! Không cần teleport.")
        end
    end
end

Teleport()  -- Bắt đầu quá trình teleport
local fask = task
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false

local File = pcall(function()
    AllIDs = game:GetService("HttpService"):JSONDecode(readfile("NotSameServers.json"))
end)

if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
end

function TPReturner()
    local Site
    Site = game:GetService("HttpService"):JSONDecode(
        game:HttpGet("http://localhost:3000/JobData/common-boss")
    )

    local ID = ""
    local num = 0

    -- Kiểm tra nếu API trả về danh sách "jobs"
    if Site.jobs then
        -- Lấy job mới nhất (ở cuối danh sách)
        local latestJob = Site.jobs[#Site.jobs]  -- lấy phần tử cuối cùng
        if latestJob and latestJob.bossName == "Soul Reaper" then
            local Possible = true
            ID = tostring(latestJob.jobId)

            -- Kiểm tra số lượng người chơi
            if tonumber(latestJob.playerCount) < 12 then
                for _, Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            pcall(function()
                                delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end

                -- Nếu server hợp lệ, thực hiện dịch chuyển
                if Possible == true then
                    table.insert(AllIDs, ID)
                    fask.wait()
                    pcall(function()
                        writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
                        fask.wait()
                        local args = {
                            [1] = "teleport",
                            [2] = ID
                        }

                        game:GetService("ReplicatedStorage").__ServerBrowser:InvokeServer(unpack(args))
                    end)
                    fask.wait(0.5)
                end
            end
        end
    end
end

local function IsBossExists(bossName)
    -- Kiểm tra xem boss đã tồn tại trong workspace hoặc ReplicatedStorage chưa
    if game.Workspace.Enemies:FindFirstChild(bossName) or game.ReplicatedStorage:FindFirstChild(bossName) then
        return true
    end
    return false
end

function Teleport()
    while fask.wait(1) do
        -- Kiểm tra xem boss đã xuất hiện chưa
        if not IsBossExists("Soul Reaper") then
            -- Nếu boss chưa xuất hiện, thực hiện teleport
            pcall(function()
                TPReturner()
            end)
        else
            print("Boss đã xuất hiện! Không cần teleport.")
        end
    end
end

Teleport()  -- Bắt đầu quá trình teleport
local fask = task
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false

local File = pcall(function()
    AllIDs = game:GetService("HttpService"):JSONDecode(readfile("NotSameServers.json"))
end)

if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
end

-- Function to check if the "MysticIsland" exists in the Workspace
local function IsMirageIslandExists()
    return game:GetService("Workspace").Map:FindFirstChild("MysticIsland") ~= nil
end

-- Time of day check
local lighting = game:GetService("Lighting")
local timeOfDay = lighting.TimeOfDay
local hour = tonumber(timeOfDay:sub(1, 2))

-- Check if it's daytime (06:00 to 18:00)
if hour >= 6 and hour < 18 then
    print("Bây giờ là ban ngày")
else
    print("Bây giờ là ban đêm")
end

function TPReturner()
    local Site
    Site = game:GetService("HttpService"):JSONDecode(
        game:HttpGet("http://localhost:3000/JobData/mirage")
    )

    local ID = ""
    local num = 0

    if Site.jobs then
        -- Lấy job mới nhất (ở cuối danh sách)
        local latestJob = Site.jobs[#Site.jobs]  -- lấy phần tử cuối cùng
        local Possible = true
        ID = tostring(latestJob.jobId) -- Sử dụng "jobId" thay vì "id"

        -- Kiểm tra số lượng người chơi
        if tonumber(latestJob.playerCount) < 12 then -- Giả sử maxPlayers = 12
            for _, Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end

            -- Nếu server hợp lệ, thực hiện dịch chuyển
            if Possible == true then
                table.insert(AllIDs, ID)
                fask.wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
                    fask.wait()
                    local args = {
                        [1] = "teleport",
                        [2] = ID
                    }

                    game:GetService("ReplicatedStorage").__ServerBrowser:InvokeServer(unpack(args))
                end)
                fask.wait(0.5)
            end
        end
    end
end

function Teleport()
    while fask.wait(5) do  -- Thêm thời gian chờ 5 giây giữa các lần kiểm tra
        -- Kiểm tra xem Mirage Island có tồn tại không
        if IsMirageIslandExists() then
            if hour >= 6 and hour < 18 then
                -- Nếu là ban ngày, thực hiện teleport
                pcall(function()
                    TPReturner()
                end)
            else
                -- Nếu là ban đêm, bạn có thể thực hiện một hành động khác, hoặc chỉ kiểm tra lại
                print("Bây giờ là ban đêm, không teleport.")
            end
        else
            -- Nếu không có Mirage Island, tiếp tục kiểm tra lại
            pcall(function()
                TPReturner()
            end)
        end
    end
end

Teleport()  -- Bắt đầu quá trình teleport
local fask = task
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false

local File = pcall(function()
    AllIDs = game:GetService("HttpService"):JSONDecode(readfile("NotSameServers.json"))
end)

if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
end

-- Hàm kiểm tra số lượng người chơi trong game hiện tại
local function GetPlayerCount()
    return #game.Players:GetChildren() < 5 -- Kiểm tra nếu có hơn 4 người chơi
end

function TPReturner()
    local Site
    Site = game:GetService("HttpService"):JSONDecode(
        game:HttpGet("http://localhost:3000/JobData/full-moon")
    )

    local ID = ""
    local num = 0

    -- Kiểm tra nếu API trả về danh sách "jobs"
    if Site.jobs then
        for i, v in pairs(Site.jobs) do
            local Possible = true
            ID = tostring(v.jobId) -- Sử dụng "jobId" thay vì "id"

            -- Kiểm tra số lượng người chơi trong server bên ngoài
            if tonumber(v.playerCount) < 4 then -- Giới hạn server có ít hơn 4 người chơi
                -- Kiểm tra số lượng người chơi trong game hiện tại (nếu có hơn 4 người chơi, bỏ qua)
                if GetPlayerCount() then
                    continue -- Nếu có hơn 4 người chơi trong local server, bỏ qua và tiếp tục với vòng lặp
                end

                for _, Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            pcall(function()
                                delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end

                -- Nếu server hợp lệ, thực hiện dịch chuyển
                if Possible == true then
                    table.insert(AllIDs, ID)
                    fask.wait()
                    pcall(function()
                        writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
                        fask.wait()
                        local args = {
                            [1] = "teleport",
                            [2] = ID
                        }

                        game:GetService("ReplicatedStorage").__ServerBrowser:InvokeServer(unpack(args))
                    end)
                    fask.wait(0.5)
                end
            end
        end
    end
end

-- Function to check the moon phase
local function GetMoonPhase()
    local moonTextures = {
        ["http://www.roblox.com/asset/?id=9709149431"] = "Full Moon 🌕",
        ["http://www.roblox.com/asset/?id=9709149052"] = "75%",
        ["http://www.roblox.com/asset/?id=9709143733"] = "50%",
        ["http://www.roblox.com/asset/?id=9709150401"] = "25%",
        ["http://www.roblox.com/asset/?id=9709149680"] = "15%"
    }

    local textureId = game:GetService("Lighting").Sky.MoonTextureId

    -- Check if the textureId exists in the table
    if moonTextures[textureId] then
        print("Current Moon Phase: " .. moonTextures[textureId])
        return moonTextures[textureId]
    else
        print("Unknown Moon Phase")
        return nil
    end
end

-- Function to perform the 'hop' action
local function Hop()
    print("Moon phase is not Full Moon 🌕 or 75%. Triggering hop action...")
    -- Add your hop logic here (e.g., teleport or other action)
end

-- Main Teleport Function
function Teleport()
    while fask.wait(10) do
        -- Check the current moon phase
        local currentMoonPhase = GetMoonPhase()

        -- If moon phase is neither "Full Moon 🌕" nor "75%", trigger the hop action
        if currentMoonPhase and currentMoonPhase ~= "Full Moon 🌕" and currentMoonPhase ~= "75%" then
            Hop()  -- Trigger the hop action
        end

        pcall(function()
            TPReturner()
        end)
    end
end

Teleport()
